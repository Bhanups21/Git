* Git is a popular version control system. It is used for tracking code changes and coding collaboration.

* How does git work -

  1. Initialize Git on a folder, making it a "Repository". It now creates a hidden folder to track changes in that folder.

  2. Or, clone a project which is already a repository into your local.

  3. When a file is changed, added or deleted, it is considered modified.

  4. You can select modified files you want to stage, That takes a snapshot of that file at that time when committed.

  5. This staged files are committed can be reverted back to previous commits.

  6. Git doesn't store a separate copy of every file in every commit, but keeps track of changes made in each commit.

  7. It allows branch and merge to allow to work on different parts and versions of a project.

  8. Pull the latest version of the project to a local copy and push local updates to the main project in remote server.

* git --version : Used to check versions of git.

* git config --global user.name "username"
  git config --global user.email "email" } This commands are for letting know who you and who is making changes. Adding --global option defines it for every repo on your system excluding it makes it for current repo. This information is used at the time of making commits.

* git init : It initializes current repo as git repo. Now, git watches changes in this folder and keeps track in folder .git in same folder.

* git status : It gives the current status of all tracked files and Untracked files in the current repo.

  1. Tracked Files : Files that git knows about and are added to the repo. Simply, git will record changes on it.
  
  2. Untracked Files : Files that git doesn't know about but are in your current repo. Simply, git will not record changes of it. To make git look into them we should add them to staging area.
  
* git add <file-name> : Once we think we are done working with some files we have to stage the changes made on them to commit them for permanent change or till a checkpoint so we can roll back when needed. In place of filename if we give a '.' it will consider all the tracked changed files and add them to stage. It works same with --add and -A options.

* git commit -m "message" : Commit is nothing but save point were add is a safe save point. Commit is permanent save point or checkpoint. We can move forward and backward with commit. It is always recommended to add a message with commit. So, we can understand what exact changes we made on that commit. We can add message option with -m.