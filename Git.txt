* Git is a popular version control system. It is used for tracking code changes and coding collaboration.

* How does git work -

  1. Initialize Git on a folder, making it a "Repository". It now creates a hidden folder to track changes in that folder.

  2. Or, clone a project which is already a repository into your local.

  3. When a file is changed, added or deleted, it is considered modified.

  4. You can select modified files you want to stage, That takes a snapshot of that file at that time when committed.

  5. This staged files are committed can be reverted back to previous commits.

  6. Git doesn't store a separate copy of every file in every commit, but keeps track of changes made in each commit.

  7. It allows branch and merge to allow to work on different parts and versions of a project.

  8. Pull the latest version of the project to a local copy and push local updates to the main project in remote server.

* git --version : Used to check versions of git.

* git config --global user.name "username"
  git config --global user.email "email" } This commands are for letting know who you and who is making changes. Adding --global option defines it for every repo on your system excluding it makes it for current repo. This information is used at the time of making commits.

* git init : It initializes current repo as git repo. Now, git watches changes in this folder and keeps track in folder .git in same folder.

* git status : It gives the current status of all tracked files and Untracked files in the current repo.

  1. Tracked Files : Files that git knows about and are added to the repo. Simply, git will record changes on it.
  
  2. Untracked Files : Files that git doesn't know about but are in your current repo. Simply, git will not record changes of it. To make git look into them we should add them to staging area.
  
  Using --short option, we can see the changes in a more compact way rather than texts it gives symbols indications as follows. (?? - Untracked files, A - files added to stage, M - Modified files, D - Deleted files)
  
* git add <file-name> : Once we think we are done working with some files we have to stage the changes made on them to commit them for permanent change or till a checkpoint so we can roll back when needed. In place of filename if we give a '.' it will consider all the tracked changed files and add them to stage. It works same with --add and -A options.

* git commit -m "message" : Commit is nothing but save point were add is a safe save point. Commit is permanent save point or checkpoint. We can move forward and backward with commit. It is always recommended to add a message with commit. So, we can understand what exact changes we made on that commit. We can add message option with -m.

* git log : It gives the complete history of all commits along with its hash values, commit messages, time and author details. when used with --oneline option log for each individual commit will be shorter.

* git --help : It lists out all the commands and options available with git for the particular version in our system. In order to get help for particular command and it options, we can type git <command> -help, It will list out all options for that command.

* git branch <branch-name> : To create a new branch on master we use this command. So that main branch is not disturbed and we can work on some another piece of code on this branch. Using it without branch-name will list out all branches previously created. And one with (*) side of it is the current used branch. When used with -d option it will delete the branch mentioned. -a option is to list all branch both local and remote. -r is for only remote.

* git checkout <branch-name> : It is useful when switching between branches. When used with -b option it will create a new branch on master if not already present.

* git merge <branch-name> : It is used to merge other branches to master. It should be done only after checking out on master.

* Merge conflict : It happens when in two different branches the same file is modified with different changes. To avoid it we must make sure both the files are same in both merges. like the master branch was merged with some branch A. now the branch B has same changes to file as branch A had then file in branch B should match A. Then only we can merge them to master.

* git remote add origin [url] : This will set a remote repository of the local repository in the server via url. Giving a name as origin. now this can be used for team collobration.

* git push origin <remote-branch> : This commands is used to push changes from our local to remote. branch specifies which branch in remote should recieve over changes. If the command is used with --set-upstream button it means the branch should be created at origin as well.

* git fetch <remote-branch> : This command fetches or gets all the changes that are on that branch to your current local branch. It is just fetches but not merged into current branch. To merge we have to use merge command again.

* git pull <remote-branch> : This command pulls the latest changes from remote branch and merges them into the current branch. It is the combination of both fetch and merge.
